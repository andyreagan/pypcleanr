{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.1", "generated_at": "2021-10-21T18:21:19.609442Z", "invocation_id": "32494b09-494b-41c5-b6cd-babb69ed1383", "env": {}, "project_id": "28d1d297315125de6e9b32d7a2d6d5bf", "user_id": "2a42087a-5ce8-4fe8-adee-88926fd02e0e", "send_anonymous_usage_stats": true, "adapter_type": "vertica"}, "nodes": {"model.wearables_dm.primary_device": {"raw_sql": "WITH metric_counts AS (\n    SELECT\n         user_id_external,\n         metric_source,\n         COUNT(*) AS metric_count\n    FROM {{ref('metric_data_vw')}}\n    GROUP BY 1, 2\n    ORDER BY 1, 3\n),\nmetric_preferences AS (SELECT\n    user_id_external,\n    metric_source,\n    metric_count,\n    ROW_NUMBER() OVER (\n        PARTITION BY user_id_external ORDER BY metric_count\n    ) AS metric_preference\n    FROM metric_counts\n    ORDER BY 1, 3\n)\nSELECT\n    metric_preferences.user_id_external, metric_preferences.metric_source\nFROM metric_preferences WHERE metric_preferences.metric_preference = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.metric_data_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "primary_device"], "unique_id": "model.wearables_dm.primary_device", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "primary_device.sql", "original_file_path": "models/primary_device.sql", "name": "primary_device", "alias": "primary_device", "checksum": {"name": "sha256", "checksum": "5e7d8ade69d808aab949ff0ae2b156b9dcc620a5a79b726175f468d1e2edff3a"}, "tags": [], "refs": [["metric_data_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/primary_device.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "WITH metric_counts AS (\n    SELECT\n         user_id_external,\n         metric_source,\n         COUNT(*) AS metric_count\n    FROM \"advana\".\"wearables\".\"metric_data_vw\"\n    GROUP BY 1, 2\n    ORDER BY 1, 3\n),\nmetric_preferences AS (SELECT\n    user_id_external,\n    metric_source,\n    metric_count,\n    ROW_NUMBER() OVER (\n        PARTITION BY user_id_external ORDER BY metric_count\n    ) AS metric_preference\n    FROM metric_counts\n    ORDER BY 1, 3\n)\nSELECT\n    metric_preferences.user_id_external, metric_preferences.metric_source\nFROM metric_preferences WHERE metric_preferences.metric_preference = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"primary_device\""}, "model.wearables_dm.wearables_dm": {"raw_sql": "WITH users_edw AS (\n    SELECT\n         users_email,\n        party_dim_party_natural_key_hash_uuid\n    FROM {{ref('users_edw_wide')}}\n    GROUP BY 1, 2),\nbmi_ranked AS (\n    SELECT\n         users_edw.users_email,\n        uwdm_height_weight.height,\n        uwdm_height_weight.weight,\n        uwdm_height_weight.bmi,\n        ROW_NUMBER() OVER(\n            PARTITION BY\n                users_edw.users_email\n            ORDER BY uwdm_height_weight.bmi ASC\n        ) AS bmi_rank\n    FROM users_edw\n    LEFT OUTER JOIN {{ref('mortality_uwdm_height_weight_vw')}} uwdm_height_weight\n                    ON\n            uwdm_height_weight.dim_party_natural_key_hash_uuid = users_edw.party_dim_party_natural_key_hash_uuid\n),\nbest_bmi AS (\n    SELECT\n         bmi_ranked.users_email,\n        bmi_ranked.height,\n        bmi_ranked.weight,\n        bmi_ranked.bmi\n    FROM bmi_ranked\n    WHERE bmi_ranked.bmi IS NOT NULL AND bmi_ranked.bmi_rank = 1\n),\nhits_m3s AS (SELECT\n    users_user_id_external AS user_id_external,\n    m3s_score,\n    m3s_percentile\n    FROM {{ref('users_m3s_hits')}}\n    WHERE m3s_rank = 1 AND m3s_score IS NOT NULL\n),\nhits_fm3s AS (\n    SELECT\n         users_user_id_external AS user_id_external,\n        fm3s_score,\n        fm3s_percentile\n    FROM {{ref('users_m3s_hits')}}\n    WHERE fm3s_rank = 1 AND fm3s_score IS NOT NULL\n)\nSELECT\n    users_data_flat.*,\n    users.internal_user AS internal_user,\n    users_risk_class_type_cde.risk_class_type_cde,\n    users_risk_class_type_cde.issue_dt,\n    users_major_product_type_desc_pivot.non_traditional_life,\n    users_major_product_type_desc_pivot.traditional_term,\n    users_major_product_type_desc_pivot.traditional_permanent,\n    best_bmi.height,\n    best_bmi.weight,\n    best_bmi.bmi,\n    hits_m3s.m3s_score,\n    hits_m3s.m3s_percentile,\n    hits_fm3s.fm3s_score,\n    hits_fm3s.fm3s_percentile\nFROM {{ref('users_enrolled_vw')}} users\nLEFT OUTER JOIN {{ref('user_data_flat')}} users_data_flat\n                USING (user_id_external)\nLEFT OUTER JOIN {{ref('users_risk_class_type_cde')}} users_risk_class_type_cde\n                ON\n    LOWER(TRIM(users.email)) = LOWER(TRIM(users_risk_class_type_cde.users_email))\nLEFT OUTER JOIN {{ref('users_major_product_type_desc_pivot')}} users_major_product_type_desc_pivot\n    ON LOWER(TRIM(users.email)) = LOWER(TRIM(users_major_product_type_desc_pivot.users_email))\nLEFT OUTER JOIN best_bmi\n                ON LOWER(TRIM(users.email)) = LOWER(TRIM(best_bmi.users_email))\nLEFT OUTER JOIN hits_m3s\n                USING (user_id_external)\nLEFT OUTER JOIN hits_fm3s\n    USING (user_id_external)\nWHERE users_data_flat.user_id_external IS NOT NULL\n    AND users_risk_class_type_cde.users_email IS NOT NULL\nORDER BY 1, 2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.users_edw_wide", "model.wearables_dm.mortality_uwdm_height_weight_vw", "model.wearables_dm.users_m3s_hits", "model.wearables_dm.users_m3s_hits", "model.wearables_dm.users_enrolled_vw", "model.wearables_dm.user_data_flat", "model.wearables_dm.users_risk_class_type_cde", "model.wearables_dm.users_major_product_type_desc_pivot"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "wearables_dm"], "unique_id": "model.wearables_dm.wearables_dm", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "wearables_dm.sql", "original_file_path": "models/wearables_dm.sql", "name": "wearables_dm", "alias": "wearables_dm", "checksum": {"name": "sha256", "checksum": "04fd96900d022bd2b5b18c717c9de010d83587d9807fdd3688497089db360987"}, "tags": [], "refs": [["users_edw_wide"], ["mortality_uwdm_height_weight_vw"], ["users_m3s_hits"], ["users_m3s_hits"], ["users_enrolled_vw"], ["user_data_flat"], ["users_risk_class_type_cde"], ["users_major_product_type_desc_pivot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/wearables_dm.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "WITH users_edw AS (\n    SELECT\n         users_email,\n        party_dim_party_natural_key_hash_uuid\n    FROM \"advana\".\"wearables\".\"users_edw_wide\"\n    GROUP BY 1, 2),\nbmi_ranked AS (\n    SELECT\n         users_edw.users_email,\n        uwdm_height_weight.height,\n        uwdm_height_weight.weight,\n        uwdm_height_weight.bmi,\n        ROW_NUMBER() OVER(\n            PARTITION BY\n                users_edw.users_email\n            ORDER BY uwdm_height_weight.bmi ASC\n        ) AS bmi_rank\n    FROM users_edw\n    LEFT OUTER JOIN \"advana\".\"wearables\".\"mortality_uwdm_height_weight_vw\" uwdm_height_weight\n                    ON\n            uwdm_height_weight.dim_party_natural_key_hash_uuid = users_edw.party_dim_party_natural_key_hash_uuid\n),\nbest_bmi AS (\n    SELECT\n         bmi_ranked.users_email,\n        bmi_ranked.height,\n        bmi_ranked.weight,\n        bmi_ranked.bmi\n    FROM bmi_ranked\n    WHERE bmi_ranked.bmi IS NOT NULL AND bmi_ranked.bmi_rank = 1\n),\nhits_m3s AS (SELECT\n    users_user_id_external AS user_id_external,\n    m3s_score,\n    m3s_percentile\n    FROM \"advana\".\"wearables\".\"users_m3s_hits\"\n    WHERE m3s_rank = 1 AND m3s_score IS NOT NULL\n),\nhits_fm3s AS (\n    SELECT\n         users_user_id_external AS user_id_external,\n        fm3s_score,\n        fm3s_percentile\n    FROM \"advana\".\"wearables\".\"users_m3s_hits\"\n    WHERE fm3s_rank = 1 AND fm3s_score IS NOT NULL\n)\nSELECT\n    users_data_flat.*,\n    users.internal_user AS internal_user,\n    users_risk_class_type_cde.risk_class_type_cde,\n    users_risk_class_type_cde.issue_dt,\n    users_major_product_type_desc_pivot.non_traditional_life,\n    users_major_product_type_desc_pivot.traditional_term,\n    users_major_product_type_desc_pivot.traditional_permanent,\n    best_bmi.height,\n    best_bmi.weight,\n    best_bmi.bmi,\n    hits_m3s.m3s_score,\n    hits_m3s.m3s_percentile,\n    hits_fm3s.fm3s_score,\n    hits_fm3s.fm3s_percentile\nFROM \"advana\".\"wearables\".\"users_enrolled_vw\" users\nLEFT OUTER JOIN \"advana\".\"wearables\".\"user_data_flat\" users_data_flat\n                USING (user_id_external)\nLEFT OUTER JOIN \"advana\".\"wearables\".\"users_risk_class_type_cde\" users_risk_class_type_cde\n                ON\n    LOWER(TRIM(users.email)) = LOWER(TRIM(users_risk_class_type_cde.users_email))\nLEFT OUTER JOIN \"advana\".\"wearables\".\"users_major_product_type_desc_pivot\" users_major_product_type_desc_pivot\n    ON LOWER(TRIM(users.email)) = LOWER(TRIM(users_major_product_type_desc_pivot.users_email))\nLEFT OUTER JOIN best_bmi\n                ON LOWER(TRIM(users.email)) = LOWER(TRIM(best_bmi.users_email))\nLEFT OUTER JOIN hits_m3s\n                USING (user_id_external)\nLEFT OUTER JOIN hits_fm3s\n    USING (user_id_external)\nWHERE users_data_flat.user_id_external IS NOT NULL\n    AND users_risk_class_type_cde.users_email IS NOT NULL\nORDER BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"wearables_dm\""}, "model.wearables_dm.users_m3s_hits": {"raw_sql": "WITH hits AS (SELECT\n    users.email,\n    users.user_id_external AS users_user_id_external,\n    users.internal_user AS users_internal_user,\n    m3s_io.response_code AS m3s_hit,\n    m3s_io.percentile AS m3s_percentile,\n    m3s_io.score AS m3s_score,\n    fm3s_io.response_code AS fm3s_hit,\n    fm3s_io.percentile AS fm3s_percentile,\n    fm3s_io.score AS fm3s_score\n    FROM {{ref('users_enrolled_vw')}} users\n    LEFT OUTER JOIN {{ref('user_data_flat')}} user_data_flat\n                    USING (user_id_external)\n    LEFT OUTER JOIN {{ref('users_edw_wide')}} users_edw_wide\n                    ON\n            LOWER(TRIM(users.email)) = LOWER(TRIM(users_edw_wide.users_email))\n    LEFT OUTER JOIN {{ref('blender_analytics_m3s_io_vw')}} m3s_io\n                    ON\n            TRIM(\n                TRIM(LEADING '0' FROM m3s_io.policy_number)\n            ) = TRIM(\n                TRIM(LEADING '0' FROM users_edw_wide.agr_agreement_nr)\n            )\n    LEFT OUTER JOIN {{ref('blender_analytics_fm3s_io_vw')}} fm3s_io\n                    ON\n            TRIM(\n                TRIM(LEADING '0' FROM fm3s_io.policy_number)\n            ) = TRIM(\n                TRIM(LEADING '0' FROM users_edw_wide.agr_agreement_nr)\n            )\n    WHERE user_data_flat.user_id_external IS NOT NULL\n          AND users_edw_wide.users_email IS NOT NULL\n    ORDER BY 3, 1)\n\nSELECT\n    users_user_id_external,\n    users_internal_user,\n    m3s_score::float,\n    m3s_percentile::int,\n    fm3s_score::float,\n    fm3s_percentile::int,\n    ROW_NUMBER() OVER (\n        PARTITION BY users_user_id_external ORDER BY m3s_percentile::int ASC\n    ) AS m3s_rank,\n    ROW_NUMBER() OVER (\n        PARTITION BY users_user_id_external ORDER BY fm3s_percentile::int ASC\n    ) AS fm3s_rank\nFROM hits\nWHERE ((m3s_score IS NOT NULL) OR (fm3s_score IS NOT NULL))\nGROUP BY 1, 2, 3, 4, 5, 6\nORDER BY 2, 1, 3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.users_enrolled_vw", "model.wearables_dm.user_data_flat", "model.wearables_dm.users_edw_wide", "model.wearables_dm.blender_analytics_m3s_io_vw", "model.wearables_dm.blender_analytics_fm3s_io_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "users_m3s_hits"], "unique_id": "model.wearables_dm.users_m3s_hits", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "users_m3s_hits.sql", "original_file_path": "models/users_m3s_hits.sql", "name": "users_m3s_hits", "alias": "users_m3s_hits", "checksum": {"name": "sha256", "checksum": "b179f2144793f1f205d8455c21c82cf03b9259edb1e92fb4ad5452244b02cc66"}, "tags": [], "refs": [["users_enrolled_vw"], ["user_data_flat"], ["users_edw_wide"], ["blender_analytics_m3s_io_vw"], ["blender_analytics_fm3s_io_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/users_m3s_hits.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "WITH hits AS (SELECT\n    users.email,\n    users.user_id_external AS users_user_id_external,\n    users.internal_user AS users_internal_user,\n    m3s_io.response_code AS m3s_hit,\n    m3s_io.percentile AS m3s_percentile,\n    m3s_io.score AS m3s_score,\n    fm3s_io.response_code AS fm3s_hit,\n    fm3s_io.percentile AS fm3s_percentile,\n    fm3s_io.score AS fm3s_score\n    FROM \"advana\".\"wearables\".\"users_enrolled_vw\" users\n    LEFT OUTER JOIN \"advana\".\"wearables\".\"user_data_flat\" user_data_flat\n                    USING (user_id_external)\n    LEFT OUTER JOIN \"advana\".\"wearables\".\"users_edw_wide\" users_edw_wide\n                    ON\n            LOWER(TRIM(users.email)) = LOWER(TRIM(users_edw_wide.users_email))\n    LEFT OUTER JOIN \"advana\".\"wearables\".\"blender_analytics_m3s_io_vw\" m3s_io\n                    ON\n            TRIM(\n                TRIM(LEADING '0' FROM m3s_io.policy_number)\n            ) = TRIM(\n                TRIM(LEADING '0' FROM users_edw_wide.agr_agreement_nr)\n            )\n    LEFT OUTER JOIN \"advana\".\"wearables\".\"blender_analytics_fm3s_io_vw\" fm3s_io\n                    ON\n            TRIM(\n                TRIM(LEADING '0' FROM fm3s_io.policy_number)\n            ) = TRIM(\n                TRIM(LEADING '0' FROM users_edw_wide.agr_agreement_nr)\n            )\n    WHERE user_data_flat.user_id_external IS NOT NULL\n          AND users_edw_wide.users_email IS NOT NULL\n    ORDER BY 3, 1)\n\nSELECT\n    users_user_id_external,\n    users_internal_user,\n    m3s_score::float,\n    m3s_percentile::int,\n    fm3s_score::float,\n    fm3s_percentile::int,\n    ROW_NUMBER() OVER (\n        PARTITION BY users_user_id_external ORDER BY m3s_percentile::int ASC\n    ) AS m3s_rank,\n    ROW_NUMBER() OVER (\n        PARTITION BY users_user_id_external ORDER BY fm3s_percentile::int ASC\n    ) AS fm3s_rank\nFROM hits\nWHERE ((m3s_score IS NOT NULL) OR (fm3s_score IS NOT NULL))\nGROUP BY 1, 2, 3, 4, 5, 6\nORDER BY 2, 1, 3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"users_m3s_hits\""}, "model.wearables_dm.users_risk_class_type_cde": {"raw_sql": "WITH wearables AS (\n    SELECT\n         party_dim_party_natural_key_hash_uuid,\n        agr_dim_agreement_natural_key_hash_uuid,\n        users_email,\n        users_internal_user\n    FROM {{ref('users_edw_wide')}}\n    GROUP BY 1, 2, 3, 4\n),\nsorted AS (\n    SELECT\n         wearables.users_email,\n            uw_life_apps_vw.risk_class_type_cde,\n            uw_life_apps_vw.issue_dt,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                wearables.users_email\n            ORDER BY     uw_life_apps_vw.issue_dt DESC\n        ) AS row_num\n    FROM wearables\n    INNER JOIN\n         {{ref('edw_uw_vw_uw_life_apps_vw_vw')}} uw_life_apps_vw\n         ON\n        wearables.agr_dim_agreement_natural_key_hash_uuid =     uw_life_apps_vw.dim_agreement_natural_key_hash_uuid\n        AND     uw_life_apps_vw.risk_class_type_cde != 'UNK' AND     uw_life_apps_vw.risk_class_type_cde IS NOT NULL\n    GROUP BY 1, 2, 3\n)\nSELECT\n    risk_class_type_cde,\n    issue_dt,\n    LOWER(TRIM(users_email)) as users_email\nFROM sorted\nWHERE row_num = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.users_edw_wide", "model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "users_risk_class_type_cde"], "unique_id": "model.wearables_dm.users_risk_class_type_cde", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "users_risk_class_type_cde.sql", "original_file_path": "models/users_risk_class_type_cde.sql", "name": "users_risk_class_type_cde", "alias": "users_risk_class_type_cde", "checksum": {"name": "sha256", "checksum": "fd526d3a7fddf5991d7fb9996fb9a2811a291c0188e343e338f7b7f6c4d25d94"}, "tags": [], "refs": [["users_edw_wide"], ["edw_uw_vw_uw_life_apps_vw_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/users_risk_class_type_cde.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "WITH wearables AS (\n    SELECT\n         party_dim_party_natural_key_hash_uuid,\n        agr_dim_agreement_natural_key_hash_uuid,\n        users_email,\n        users_internal_user\n    FROM \"advana\".\"wearables\".\"users_edw_wide\"\n    GROUP BY 1, 2, 3, 4\n),\nsorted AS (\n    SELECT\n         wearables.users_email,\n            uw_life_apps_vw.risk_class_type_cde,\n            uw_life_apps_vw.issue_dt,\n        ROW_NUMBER() OVER (\n            PARTITION BY\n                wearables.users_email\n            ORDER BY     uw_life_apps_vw.issue_dt DESC\n        ) AS row_num\n    FROM wearables\n    INNER JOIN\n         \"advana\".\"wearables\".\"edw_uw_vw_uw_life_apps_vw_vw\" uw_life_apps_vw\n         ON\n        wearables.agr_dim_agreement_natural_key_hash_uuid =     uw_life_apps_vw.dim_agreement_natural_key_hash_uuid\n        AND     uw_life_apps_vw.risk_class_type_cde != 'UNK' AND     uw_life_apps_vw.risk_class_type_cde IS NOT NULL\n    GROUP BY 1, 2, 3\n)\nSELECT\n    risk_class_type_cde,\n    issue_dt,\n    LOWER(TRIM(users_email)) as users_email\nFROM sorted\nWHERE row_num = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"users_risk_class_type_cde\""}, "model.wearables_dm.user_data_flat": {"raw_sql": "SELECT\n    active_duration.min_metric_value AS active_duration_min,\n    active_duration.mean_metric_value AS active_duration_mean,\n    active_duration.max_metric_value AS active_duration_max,\n    floors_climbed.min_metric_value AS floors_climbed_min,\n    floors_climbed.mean_metric_value AS floors_climbed_mean,\n    floors_climbed.max_metric_value AS floors_climbed_max,\n    sleep_duration.min_metric_value AS sleep_duration_min,\n    sleep_duration.mean_metric_value AS sleep_duration_mean,\n    sleep_duration.max_metric_value AS sleep_duration_max,\n    steps.min_metric_value AS steps_min,\n    steps.mean_metric_value AS steps_mean,\n    steps.max_metric_value AS steps_max,\n    users_primary_device.metric_source AS primary_device,\n    COALESCE(\n        active_duration.user_id_external,\n        floors_climbed.user_id_external,\n        sleep_duration.user_id_external,\n        steps.user_id_external\n ) AS user_id_external\nFROM (\n    SELECT\n         user_id_external,\n        MIN(metric_value / 60) AS min_metric_value,\n        AVG(metric_value / 60) AS mean_metric_value,\n        MAX(metric_value / 60) AS max_metric_value\n    FROM {{ref('active_duration')}}\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS active_duration\nFULL OUTER JOIN (\n    SELECT\n         user_id_external,\n        MIN(metric_value) AS min_metric_value,\n        AVG(metric_value) AS mean_metric_value,\n        MAX(metric_value) AS max_metric_value\n    FROM {{ref('floors_climbed')}}\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS floors_climbed\nUSING (user_id_external)\nFULL OUTER JOIN (\n    SELECT\n         user_id_external,\n        MIN(metric_value / 60 / 60) AS min_metric_value,\n        AVG(metric_value / 60 / 60) AS mean_metric_value,\n        MAX(metric_value / 60 / 60) AS max_metric_value\n    FROM {{ref('sleep_duration')}}\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS sleep_duration\nUSING (user_id_external)\nFULL OUTER JOIN (\n    SELECT\n         user_id_external,\n        MIN(metric_value) AS min_metric_value,\n        AVG(metric_value) AS mean_metric_value,\n        MAX(metric_value) AS max_metric_value\n    FROM {{ref('steps')}}\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS steps\nUSING (user_id_external)\nFULL OUTER JOIN {{ref('primary_device')}} users_primary_device\n    USING (user_id_external)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.active_duration", "model.wearables_dm.floors_climbed", "model.wearables_dm.sleep_duration", "model.wearables_dm.steps", "model.wearables_dm.primary_device"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "user_data_flat"], "unique_id": "model.wearables_dm.user_data_flat", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "user_data_flat.sql", "original_file_path": "models/user_data_flat.sql", "name": "user_data_flat", "alias": "user_data_flat", "checksum": {"name": "sha256", "checksum": "b4e0487251fb63e0046265eb676a661da3be4b220e95b8874133c7606941fe3f"}, "tags": [], "refs": [["active_duration"], ["floors_climbed"], ["sleep_duration"], ["steps"], ["primary_device"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/user_data_flat.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "SELECT\n    active_duration.min_metric_value AS active_duration_min,\n    active_duration.mean_metric_value AS active_duration_mean,\n    active_duration.max_metric_value AS active_duration_max,\n    floors_climbed.min_metric_value AS floors_climbed_min,\n    floors_climbed.mean_metric_value AS floors_climbed_mean,\n    floors_climbed.max_metric_value AS floors_climbed_max,\n    sleep_duration.min_metric_value AS sleep_duration_min,\n    sleep_duration.mean_metric_value AS sleep_duration_mean,\n    sleep_duration.max_metric_value AS sleep_duration_max,\n    steps.min_metric_value AS steps_min,\n    steps.mean_metric_value AS steps_mean,\n    steps.max_metric_value AS steps_max,\n    users_primary_device.metric_source AS primary_device,\n    COALESCE(\n        active_duration.user_id_external,\n        floors_climbed.user_id_external,\n        sleep_duration.user_id_external,\n        steps.user_id_external\n ) AS user_id_external\nFROM (\n    SELECT\n         user_id_external,\n        MIN(metric_value / 60) AS min_metric_value,\n        AVG(metric_value / 60) AS mean_metric_value,\n        MAX(metric_value / 60) AS max_metric_value\n    FROM \"advana\".\"wearables\".\"active_duration\"\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS active_duration\nFULL OUTER JOIN (\n    SELECT\n         user_id_external,\n        MIN(metric_value) AS min_metric_value,\n        AVG(metric_value) AS mean_metric_value,\n        MAX(metric_value) AS max_metric_value\n    FROM \"advana\".\"wearables\".\"floors_climbed\"\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS floors_climbed\nUSING (user_id_external)\nFULL OUTER JOIN (\n    SELECT\n         user_id_external,\n        MIN(metric_value / 60 / 60) AS min_metric_value,\n        AVG(metric_value / 60 / 60) AS mean_metric_value,\n        MAX(metric_value / 60 / 60) AS max_metric_value\n    FROM \"advana\".\"wearables\".\"sleep_duration\"\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS sleep_duration\nUSING (user_id_external)\nFULL OUTER JOIN (\n    SELECT\n         user_id_external,\n        MIN(metric_value) AS min_metric_value,\n        AVG(metric_value) AS mean_metric_value,\n        MAX(metric_value) AS max_metric_value\n    FROM \"advana\".\"wearables\".\"steps\"\n    WHERE user_id_external IS NOT NULL\n    GROUP BY 1\n) AS steps\nUSING (user_id_external)\nFULL OUTER JOIN \"advana\".\"wearables\".\"primary_device\" users_primary_device\n    USING (user_id_external)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"user_data_flat\""}, "model.wearables_dm.users_edw_wide": {"raw_sql": "SELECT\n    rel_party_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid AS rel_dim_electronic_address_natural_key_hash_uuid,\n    rel_party_electronic_address_vw.current_row_ind AS rel_current_row_ind,\n    rel_party_electronic_address_vw.dim_party_natural_key_hash_uuid AS rel_dim_party_natural_key_hash_uuid,\n    dim_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid AS elect_dim_electronic_address_natural_key_hash_uuid,\n    dim_electronic_address_vw.current_row_ind AS elect_current_row_ind,\n    dim_electronic_address_vw.electronic_address_id AS email_id,\n    party_master_of_masters_xref_vw.dim_prior_party_natural_key_hash_uuid AS xref_dim_prior_party_natural_key_hash_uuid,\n    party_master_of_masters_xref_vw.dim_party_natural_key_hash_uuid AS xref_dim_party_natural_key_hash_uuid,\n    party_master_of_masters_xref_vw.current_row_ind AS xref_current_row_ind,\n    party_master_of_masters_xref_vw.party_id_type_cde AS xref_party_id_type_cde,\n    dim_party_vw.dim_party_natural_key_hash_uuid AS party_dim_party_natural_key_hash_uuid,\n    dim_party_vw.current_row_ind AS party_current_row_ind,\n    dim_party_vw.first_nm AS party_first_nm,\n    dim_party_vw.last_nm AS party_last_nm,\n    dim_party_vw.middle_nm AS party_middle_nm,\n    dim_party_vw.full_nm AS party_full_nm,\n    dim_party_vw.birth_dt AS party_birth_dt,\n    dim_party_vw.gender_cde AS party_gender_cde,\n    rel_party_agreement_vw.dim_party_natural_key_hash_uuid AS rpa_dim_party_natural_key_hash_uuid,\n    rel_party_agreement_vw.dim_agreement_natural_key_hash_uuid AS rpa_dim_agreement_natural_key_hash_uuid,\n    rel_party_agreement_vw.current_row_ind AS rpa_current_row_ind,\n    dim_agreement_vw.dim_agreement_natural_key_hash_uuid AS agr_dim_agreement_natural_key_hash_uuid,\n    dim_agreement_vw.current_row_ind AS agr_current_row_ind,\n    dim_agreement_vw.agreement_nr_pfx AS agr_agreement_nr_pfx,\n    dim_agreement_vw.agreement_nr AS agr_agreement_nr,\n    dim_agreement_vw.agreement_nr_sfx AS agr_agreement_nr_sfx,\n    dim_agreement_vw.agreement_source_cde AS agr_agreement_source_cde,\n    dim_agreement_vw.agreement_type_cde AS agr_agreement_type_cde,\n    users.email AS users_email,\n    users.internal_user AS users_internal_user,\n    users.signup_date AS users_signup_date,\n    users.program_status AS users_program_status\nFROM {{ref('edw_vw_rel_party_electronic_address_vw_vw')}} rel_party_electronic_address_vw\nINNER JOIN {{ref('edw_vw_dim_electronic_address_vw_vw')}} dim_electronic_address_vw\n           ON\n        rel_party_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid = dim_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid AND\n        rel_party_electronic_address_vw.current_row_ind = dim_electronic_address_vw.current_row_ind\nINNER JOIN {{ref('edw_vw_party_master_of_masters_xref_vw_vw')}} party_master_of_masters_xref_vw\n    ON\n         rel_party_electronic_address_vw.dim_party_natural_key_hash_uuid = party_master_of_masters_xref_vw.dim_prior_party_natural_key_hash_uuid AND\n        party_master_of_masters_xref_vw.current_row_ind AND\n        party_master_of_masters_xref_vw.party_id_type_cde = 'Mstr_prty_id'\nLEFT JOIN {{ref('edw_vw_dim_party_vw_vw')}} dim_party_vw\n          ON\n        party_master_of_masters_xref_vw.dim_party_natural_key_hash_uuid = dim_party_vw.dim_party_natural_key_hash_uuid AND\n        party_master_of_masters_xref_vw.current_row_ind AND\n        dim_party_vw.current_row_ind\nINNER JOIN {{ref('edw_vw_rel_party_agreement_vw_vw')}} rel_party_agreement_vw\n    ON\n         rel_party_agreement_vw.dim_party_natural_key_hash_uuid = dim_party_vw.dim_party_natural_key_hash_uuid AND\n        rel_party_agreement_vw.current_row_ind\nINNER JOIN {{ref('edw_vw_dim_agreement_vw_vw')}} dim_agreement_vw\n    ON\n         dim_agreement_vw.dim_agreement_natural_key_hash_uuid = rel_party_agreement_vw.dim_agreement_natural_key_hash_uuid AND\n        dim_agreement_vw.current_row_ind\nINNER JOIN {{ref('users_enrolled_vw')}} users\n           ON\n        TRIM(LOWER(users.email)) = TRIM(LOWER(dim_electronic_address_vw.electronic_address_id))", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.edw_vw_rel_party_electronic_address_vw_vw", "model.wearables_dm.edw_vw_dim_electronic_address_vw_vw", "model.wearables_dm.edw_vw_party_master_of_masters_xref_vw_vw", "model.wearables_dm.edw_vw_dim_party_vw_vw", "model.wearables_dm.edw_vw_rel_party_agreement_vw_vw", "model.wearables_dm.edw_vw_dim_agreement_vw_vw", "model.wearables_dm.users_enrolled_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "users_edw_wide"], "unique_id": "model.wearables_dm.users_edw_wide", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "users_edw_wide.sql", "original_file_path": "models/users_edw_wide.sql", "name": "users_edw_wide", "alias": "users_edw_wide", "checksum": {"name": "sha256", "checksum": "97a93fa15f24a6b63a4527d38fb2590f8b060f1ce736a4cccf87483d45c47c28"}, "tags": [], "refs": [["edw_vw_rel_party_electronic_address_vw_vw"], ["edw_vw_dim_electronic_address_vw_vw"], ["edw_vw_party_master_of_masters_xref_vw_vw"], ["edw_vw_dim_party_vw_vw"], ["edw_vw_rel_party_agreement_vw_vw"], ["edw_vw_dim_agreement_vw_vw"], ["users_enrolled_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/users_edw_wide.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "SELECT\n    rel_party_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid AS rel_dim_electronic_address_natural_key_hash_uuid,\n    rel_party_electronic_address_vw.current_row_ind AS rel_current_row_ind,\n    rel_party_electronic_address_vw.dim_party_natural_key_hash_uuid AS rel_dim_party_natural_key_hash_uuid,\n    dim_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid AS elect_dim_electronic_address_natural_key_hash_uuid,\n    dim_electronic_address_vw.current_row_ind AS elect_current_row_ind,\n    dim_electronic_address_vw.electronic_address_id AS email_id,\n    party_master_of_masters_xref_vw.dim_prior_party_natural_key_hash_uuid AS xref_dim_prior_party_natural_key_hash_uuid,\n    party_master_of_masters_xref_vw.dim_party_natural_key_hash_uuid AS xref_dim_party_natural_key_hash_uuid,\n    party_master_of_masters_xref_vw.current_row_ind AS xref_current_row_ind,\n    party_master_of_masters_xref_vw.party_id_type_cde AS xref_party_id_type_cde,\n    dim_party_vw.dim_party_natural_key_hash_uuid AS party_dim_party_natural_key_hash_uuid,\n    dim_party_vw.current_row_ind AS party_current_row_ind,\n    dim_party_vw.first_nm AS party_first_nm,\n    dim_party_vw.last_nm AS party_last_nm,\n    dim_party_vw.middle_nm AS party_middle_nm,\n    dim_party_vw.full_nm AS party_full_nm,\n    dim_party_vw.birth_dt AS party_birth_dt,\n    dim_party_vw.gender_cde AS party_gender_cde,\n    rel_party_agreement_vw.dim_party_natural_key_hash_uuid AS rpa_dim_party_natural_key_hash_uuid,\n    rel_party_agreement_vw.dim_agreement_natural_key_hash_uuid AS rpa_dim_agreement_natural_key_hash_uuid,\n    rel_party_agreement_vw.current_row_ind AS rpa_current_row_ind,\n    dim_agreement_vw.dim_agreement_natural_key_hash_uuid AS agr_dim_agreement_natural_key_hash_uuid,\n    dim_agreement_vw.current_row_ind AS agr_current_row_ind,\n    dim_agreement_vw.agreement_nr_pfx AS agr_agreement_nr_pfx,\n    dim_agreement_vw.agreement_nr AS agr_agreement_nr,\n    dim_agreement_vw.agreement_nr_sfx AS agr_agreement_nr_sfx,\n    dim_agreement_vw.agreement_source_cde AS agr_agreement_source_cde,\n    dim_agreement_vw.agreement_type_cde AS agr_agreement_type_cde,\n    users.email AS users_email,\n    users.internal_user AS users_internal_user,\n    users.signup_date AS users_signup_date,\n    users.program_status AS users_program_status\nFROM \"advana\".\"wearables\".\"edw_vw_rel_party_electronic_address_vw_vw\" rel_party_electronic_address_vw\nINNER JOIN \"advana\".\"wearables\".\"edw_vw_dim_electronic_address_vw_vw\" dim_electronic_address_vw\n           ON\n        rel_party_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid = dim_electronic_address_vw.dim_electronic_address_natural_key_hash_uuid AND\n        rel_party_electronic_address_vw.current_row_ind = dim_electronic_address_vw.current_row_ind\nINNER JOIN \"advana\".\"wearables\".\"edw_vw_party_master_of_masters_xref_vw_vw\" party_master_of_masters_xref_vw\n    ON\n         rel_party_electronic_address_vw.dim_party_natural_key_hash_uuid = party_master_of_masters_xref_vw.dim_prior_party_natural_key_hash_uuid AND\n        party_master_of_masters_xref_vw.current_row_ind AND\n        party_master_of_masters_xref_vw.party_id_type_cde = 'Mstr_prty_id'\nLEFT JOIN \"advana\".\"wearables\".\"edw_vw_dim_party_vw_vw\" dim_party_vw\n          ON\n        party_master_of_masters_xref_vw.dim_party_natural_key_hash_uuid = dim_party_vw.dim_party_natural_key_hash_uuid AND\n        party_master_of_masters_xref_vw.current_row_ind AND\n        dim_party_vw.current_row_ind\nINNER JOIN \"advana\".\"wearables\".\"edw_vw_rel_party_agreement_vw_vw\" rel_party_agreement_vw\n    ON\n         rel_party_agreement_vw.dim_party_natural_key_hash_uuid = dim_party_vw.dim_party_natural_key_hash_uuid AND\n        rel_party_agreement_vw.current_row_ind\nINNER JOIN \"advana\".\"wearables\".\"edw_vw_dim_agreement_vw_vw\" dim_agreement_vw\n    ON\n         dim_agreement_vw.dim_agreement_natural_key_hash_uuid = rel_party_agreement_vw.dim_agreement_natural_key_hash_uuid AND\n        dim_agreement_vw.current_row_ind\nINNER JOIN \"advana\".\"wearables\".\"users_enrolled_vw\" users\n           ON\n        TRIM(LOWER(users.email)) = TRIM(LOWER(dim_electronic_address_vw.electronic_address_id))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"users_edw_wide\""}, "model.wearables_dm.users_major_product_type_desc_pivot": {"raw_sql": "SELECT\n    LOWER(TRIM(wearables.users_email)) as users_email,\n    SUM(\n        ( uw_life_apps_vw.major_product_type_desc = 'Non-Traditional Life')::int\n    ) AS non_traditional_life,\n    SUM(\n        ( uw_life_apps_vw.major_product_type_desc = 'Traditional Term')::int\n    ) AS traditional_term,\n    SUM(\n        ( uw_life_apps_vw.major_product_type_desc = 'Traditional Permanent')::int\n    ) AS traditional_permanent\nFROM (\n    SELECT\n         party_dim_party_natural_key_hash_uuid,\n        agr_dim_agreement_natural_key_hash_uuid,\n        users_email,\n        users_internal_user\n    FROM {{ref('users_edw_wide')}} users_edw_wide\n    GROUP BY 1, 2, 3, 4\n    ) AS wearables\nINNER JOIN\n    {{ref('edw_uw_vw_uw_life_apps_vw_vw')}} uw_life_apps_vw\n    ON\n        wearables.agr_dim_agreement_natural_key_hash_uuid = uw_life_apps_vw.dim_agreement_natural_key_hash_uuid\nGROUP BY 1 ORDER BY 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.users_edw_wide", "model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "users_major_product_type_desc_pivot"], "unique_id": "model.wearables_dm.users_major_product_type_desc_pivot", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "users_major_product_type_desc_pivot.sql", "original_file_path": "models/users_major_product_type_desc_pivot.sql", "name": "users_major_product_type_desc_pivot", "alias": "users_major_product_type_desc_pivot", "checksum": {"name": "sha256", "checksum": "5a5247bb757e4ff425ad82250f662a20034193f35153e3fbbe78dfc33933f936"}, "tags": [], "refs": [["users_edw_wide"], ["edw_uw_vw_uw_life_apps_vw_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/users_major_product_type_desc_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "SELECT\n    LOWER(TRIM(wearables.users_email)) as users_email,\n    SUM(\n        ( uw_life_apps_vw.major_product_type_desc = 'Non-Traditional Life')::int\n    ) AS non_traditional_life,\n    SUM(\n        ( uw_life_apps_vw.major_product_type_desc = 'Traditional Term')::int\n    ) AS traditional_term,\n    SUM(\n        ( uw_life_apps_vw.major_product_type_desc = 'Traditional Permanent')::int\n    ) AS traditional_permanent\nFROM (\n    SELECT\n         party_dim_party_natural_key_hash_uuid,\n        agr_dim_agreement_natural_key_hash_uuid,\n        users_email,\n        users_internal_user\n    FROM \"advana\".\"wearables\".\"users_edw_wide\" users_edw_wide\n    GROUP BY 1, 2, 3, 4\n    ) AS wearables\nINNER JOIN\n    \"advana\".\"wearables\".\"edw_uw_vw_uw_life_apps_vw_vw\" uw_life_apps_vw\n    ON\n        wearables.agr_dim_agreement_natural_key_hash_uuid = uw_life_apps_vw.dim_agreement_natural_key_hash_uuid\nGROUP BY 1 ORDER BY 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"users_major_product_type_desc_pivot\""}, "model.wearables_dm.edw_vw_dim_party_vw_vw": {"raw_sql": "select * from edw_vw.dim_party_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_vw_dim_party_vw_vw"], "unique_id": "model.wearables_dm.edw_vw_dim_party_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_vw_dim_party_vw_vw.sql", "original_file_path": "models/external_views/edw_vw_dim_party_vw_vw.sql", "name": "edw_vw_dim_party_vw_vw", "alias": "edw_vw_dim_party_vw_vw", "checksum": {"name": "sha256", "checksum": "03b384699008d650ac69545517abc0bf9faf187d4b5e8d8868d4c6cc3c169620"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_vw_dim_party_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_vw.dim_party_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_vw_dim_party_vw_vw\""}, "model.wearables_dm.mortality_uwdm_height_weight_vw": {"raw_sql": "{{ config(materialized='view') }}\n\nselect * from\nmortality.uwdm_height_weight", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "mortality_uwdm_height_weight_vw"], "unique_id": "model.wearables_dm.mortality_uwdm_height_weight_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/mortality_uwdm_height_weight_vw.sql", "original_file_path": "models/external_views/mortality_uwdm_height_weight_vw.sql", "name": "mortality_uwdm_height_weight_vw", "alias": "mortality_uwdm_height_weight_vw", "checksum": {"name": "sha256", "checksum": "cd3793343b937f3ced4ccff933b4e0d4e988d42f44d3e0c0f4089409d5cf2d15"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/mortality_uwdm_height_weight_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "\n\nselect * from\nmortality.uwdm_height_weight", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"mortality_uwdm_height_weight_vw\""}, "model.wearables_dm.blender_analytics_m3s_io_vw": {"raw_sql": "{{ config(materialized='view') }}\n\nselect * from\nblender_analytics.fm3s_io", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "blender_analytics_m3s_io_vw"], "unique_id": "model.wearables_dm.blender_analytics_m3s_io_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/blender_analytics_m3s_io_vw.sql", "original_file_path": "models/external_views/blender_analytics_m3s_io_vw.sql", "name": "blender_analytics_m3s_io_vw", "alias": "blender_analytics_m3s_io_vw", "checksum": {"name": "sha256", "checksum": "5cf15db4c53917aec7ff5e598f34e1ca13db9e7a11fe03dc9cab8c5f635183ea"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/blender_analytics_m3s_io_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "\n\nselect * from\nblender_analytics.fm3s_io", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"blender_analytics_m3s_io_vw\""}, "model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw": {"raw_sql": "select * from edw_uw_vw.uw_life_apps_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_uw_vw_uw_life_apps_vw_vw"], "unique_id": "model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_uw_vw_uw_life_apps_vw_vw.sql", "original_file_path": "models/external_views/edw_uw_vw_uw_life_apps_vw_vw.sql", "name": "edw_uw_vw_uw_life_apps_vw_vw", "alias": "edw_uw_vw_uw_life_apps_vw_vw", "checksum": {"name": "sha256", "checksum": "7153ed1a8702ad63edeb075acd908e05d6dd0d4188ef02e841532cdb2d779b6e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_uw_vw_uw_life_apps_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_uw_vw.uw_life_apps_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_uw_vw_uw_life_apps_vw_vw\""}, "model.wearables_dm.edw_vw_rel_party_electronic_address_vw_vw": {"raw_sql": "select * from edw_vw.rel_party_electronic_address_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_vw_rel_party_electronic_address_vw_vw"], "unique_id": "model.wearables_dm.edw_vw_rel_party_electronic_address_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_vw_rel_party_electronic_address_vw_vw.sql", "original_file_path": "models/external_views/edw_vw_rel_party_electronic_address_vw_vw.sql", "name": "edw_vw_rel_party_electronic_address_vw_vw", "alias": "edw_vw_rel_party_electronic_address_vw_vw", "checksum": {"name": "sha256", "checksum": "0ef50929b6ed34c5db1dec81bd086d992a18296bc0e7d5410f19e1d7c9c7553d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_vw_rel_party_electronic_address_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_vw.rel_party_electronic_address_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_vw_rel_party_electronic_address_vw_vw\""}, "model.wearables_dm.blender_analytics_fm3s_io_vw": {"raw_sql": "{{ config(materialized='view') }}\n\nselect * from\nblender_analytics.m3s_io", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "blender_analytics_fm3s_io_vw"], "unique_id": "model.wearables_dm.blender_analytics_fm3s_io_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/blender_analytics_fm3s_io_vw.sql", "original_file_path": "models/external_views/blender_analytics_fm3s_io_vw.sql", "name": "blender_analytics_fm3s_io_vw", "alias": "blender_analytics_fm3s_io_vw", "checksum": {"name": "sha256", "checksum": "64c655abb60bfe3de101792c62801ea7eb981812e613dca1a856388207d645b8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/blender_analytics_fm3s_io_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "\n\nselect * from\nblender_analytics.m3s_io", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"blender_analytics_fm3s_io_vw\""}, "model.wearables_dm.edw_vw_rel_party_agreement_vw_vw": {"raw_sql": "select * from edw_vw.rel_party_agreement_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_vw_rel_party_agreement_vw_vw"], "unique_id": "model.wearables_dm.edw_vw_rel_party_agreement_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_vw_rel_party_agreement_vw_vw.sql", "original_file_path": "models/external_views/edw_vw_rel_party_agreement_vw_vw.sql", "name": "edw_vw_rel_party_agreement_vw_vw", "alias": "edw_vw_rel_party_agreement_vw_vw", "checksum": {"name": "sha256", "checksum": "bbf76b64b95b77acb66267185c88d985b0e0c2a476e143dd15d188a4039b1b5b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_vw_rel_party_agreement_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_vw.rel_party_agreement_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_vw_rel_party_agreement_vw_vw\""}, "model.wearables_dm.edw_vw_party_master_of_masters_xref_vw_vw": {"raw_sql": "select * from edw_vw.party_master_of_masters_xref_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_vw_party_master_of_masters_xref_vw_vw"], "unique_id": "model.wearables_dm.edw_vw_party_master_of_masters_xref_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_vw_party_master_of_masters_xref_vw_vw.sql", "original_file_path": "models/external_views/edw_vw_party_master_of_masters_xref_vw_vw.sql", "name": "edw_vw_party_master_of_masters_xref_vw_vw", "alias": "edw_vw_party_master_of_masters_xref_vw_vw", "checksum": {"name": "sha256", "checksum": "3c22e2aa9bd668523a13168d750970690a107b21d62028509db285b7f67a4a2e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_vw_party_master_of_masters_xref_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_vw.party_master_of_masters_xref_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_vw_party_master_of_masters_xref_vw_vw\""}, "model.wearables_dm.edw_vw_dim_electronic_address_vw_vw": {"raw_sql": "select * from edw_vw.dim_electronic_address_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_vw_dim_electronic_address_vw_vw"], "unique_id": "model.wearables_dm.edw_vw_dim_electronic_address_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_vw_dim_electronic_address_vw_vw.sql", "original_file_path": "models/external_views/edw_vw_dim_electronic_address_vw_vw.sql", "name": "edw_vw_dim_electronic_address_vw_vw", "alias": "edw_vw_dim_electronic_address_vw_vw", "checksum": {"name": "sha256", "checksum": "d3d1721c787b28722aff7f0253686051b696c41cc39186b4ac745fba3e448c3c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_vw_dim_electronic_address_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_vw.dim_electronic_address_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_vw_dim_electronic_address_vw_vw\""}, "model.wearables_dm.edw_vw_dim_agreement_vw_vw": {"raw_sql": "select * from edw_vw.dim_agreement_vw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "external_views", "edw_vw_dim_agreement_vw_vw"], "unique_id": "model.wearables_dm.edw_vw_dim_agreement_vw_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "external_views/edw_vw_dim_agreement_vw_vw.sql", "original_file_path": "models/external_views/edw_vw_dim_agreement_vw_vw.sql", "name": "edw_vw_dim_agreement_vw_vw", "alias": "edw_vw_dim_agreement_vw_vw", "checksum": {"name": "sha256", "checksum": "2d6ba9a3772613774372b50fc1160ec9fa9240cd5303e95bc7c4f4217b99a3f0"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/external_views/edw_vw_dim_agreement_vw_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "select * from edw_vw.dim_agreement_vw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"edw_vw_dim_agreement_vw_vw\""}, "model.wearables_dm.active_duration": {"raw_sql": "{{ config(materialized='table') }}\n\nSELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM {{ref('metric_data_vw')}}\nWHERE metric_type = 'active_duration' AND data_type = 'summary'\nGROUP BY 1, 2\nORDER BY 1, 2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.metric_data_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "metric_summaries", "active_duration"], "unique_id": "model.wearables_dm.active_duration", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "metric_summaries/active_duration.sql", "original_file_path": "models/metric_summaries/active_duration.sql", "name": "active_duration", "alias": "active_duration", "checksum": {"name": "sha256", "checksum": "96763d5049930e46137f5ce580daf58132c0888b00a25be683b33c828af84774"}, "tags": [], "refs": [["metric_data_vw"]], "sources": [], "description": "....", "columns": {"user_id_external": {"name": "user_id_external", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "wearables_dm://models/schema.yml", "compiled_path": "target/compiled/wearables_dm/models/metric_summaries/active_duration.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "\n\nSELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM \"advana\".\"wearables\".\"metric_data_vw\"\nWHERE metric_type = 'active_duration' AND data_type = 'summary'\nGROUP BY 1, 2\nORDER BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"active_duration\""}, "model.wearables_dm.steps": {"raw_sql": "SELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM {{ref('metric_data_vw')}}\nWHERE metric_type = 'steps' AND data_type = 'summary'\nGROUP BY 1, 2\nORDER BY 1, 2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.metric_data_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "metric_summaries", "steps"], "unique_id": "model.wearables_dm.steps", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "metric_summaries/steps.sql", "original_file_path": "models/metric_summaries/steps.sql", "name": "steps", "alias": "steps", "checksum": {"name": "sha256", "checksum": "2358ca49250bd143a2d825e62f3b0e9d692ad5d07bdfbf1efabf470fe95fe3c8"}, "tags": [], "refs": [["metric_data_vw"]], "sources": [], "description": "....", "columns": {"user_id_external": {"name": "user_id_external", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "wearables_dm://models/schema.yml", "compiled_path": "target/compiled/wearables_dm/models/metric_summaries/steps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "SELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM \"advana\".\"wearables\".\"metric_data_vw\"\nWHERE metric_type = 'steps' AND data_type = 'summary'\nGROUP BY 1, 2\nORDER BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"steps\""}, "model.wearables_dm.floors_climbed": {"raw_sql": "SELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM {{ref('metric_data_vw')}}\nWHERE metric_type = 'floors_climbed' AND data_type = 'summary'\nGROUP BY 1, 2\nORDER BY 1, 2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.metric_data_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "metric_summaries", "floors_climbed"], "unique_id": "model.wearables_dm.floors_climbed", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "metric_summaries/floors_climbed.sql", "original_file_path": "models/metric_summaries/floors_climbed.sql", "name": "floors_climbed", "alias": "floors_climbed", "checksum": {"name": "sha256", "checksum": "0c81779bbd52ae8ae2d7d5ac00ba87ae2ed9aed0cb5158a31723bf339aa89da8"}, "tags": [], "refs": [["metric_data_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/metric_summaries/floors_climbed.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "SELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM \"advana\".\"wearables\".\"metric_data_vw\"\nWHERE metric_type = 'floors_climbed' AND data_type = 'summary'\nGROUP BY 1, 2\nORDER BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"floors_climbed\""}, "model.wearables_dm.sleep_duration": {"raw_sql": "SELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM {{ref('metric_data_vw')}}\nWHERE metric_type = 'sleep_duration' AND data_type = 'sleep'\nGROUP BY 1, 2\nORDER BY 1, 2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.wearables_dm.metric_data_vw"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "metric_summaries", "sleep_duration"], "unique_id": "model.wearables_dm.sleep_duration", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "metric_summaries/sleep_duration.sql", "original_file_path": "models/metric_summaries/sleep_duration.sql", "name": "sleep_duration", "alias": "sleep_duration", "checksum": {"name": "sha256", "checksum": "89ac8dbfb8ef2b9c87710cfeec3ce3790f77caa3c984495c71a63f4132fa4d6a"}, "tags": [], "refs": [["metric_data_vw"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/metric_summaries/sleep_duration.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1634840480, "compiled_sql": "SELECT\n    user_id_external,\n    TO_CHAR(\n        metric_start_time AT TIME ZONE metric_utc_offset, 'YYYY-MM-DD'\n    ) AS metric_date,\n    MAX(metric_value::FLOAT) AS metric_value\nFROM \"advana\".\"wearables\".\"metric_data_vw\"\nWHERE metric_type = 'sleep_duration' AND data_type = 'sleep'\nGROUP BY 1, 2\nORDER BY 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"sleep_duration\""}, "model.wearables_dm.metric_data_vw": {"raw_sql": "{{ config(materialized='view') }}\n\nselect * from wearables.metric_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "views", "metric_data_vw"], "unique_id": "model.wearables_dm.metric_data_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "views/metric_data_vw.sql", "original_file_path": "models/views/metric_data_vw.sql", "name": "metric_data_vw", "alias": "metric_data_vw", "checksum": {"name": "sha256", "checksum": "32ffec8ba9cda1aeb0e1611b7f7a2b41c0674454d0c73283d125e220b43b2eea"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/views/metric_data_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "\n\nselect * from wearables.metric_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"metric_data_vw\""}, "model.wearables_dm.users_enrolled_vw": {"raw_sql": "{{ config(materialized='view') }}\n\nselect *\nfrom wearables.users\nwhere program_status IN ('ENROLLED', 'OPT_OUT')", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "views", "users_enrolled_vw"], "unique_id": "model.wearables_dm.users_enrolled_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "views/users_enrolled_vw.sql", "original_file_path": "models/views/users_enrolled_vw.sql", "name": "users_enrolled_vw", "alias": "users_enrolled_vw", "checksum": {"name": "sha256", "checksum": "6ec325c7521388212679952ef6f8e4276da33411cb927f0060d5bf212b8ba7cf"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/views/users_enrolled_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "\n\nselect *\nfrom wearables.users\nwhere program_status IN ('ENROLLED', 'OPT_OUT')", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"users_enrolled_vw\""}, "model.wearables_dm.users_vw": {"raw_sql": "{{ config(materialized='view') }}\n\nselect * from wearables.users", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables", "fqn": ["wearables_dm", "views", "users_vw"], "unique_id": "model.wearables_dm.users_vw", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "views/users_vw.sql", "original_file_path": "models/views/users_vw.sql", "name": "users_vw", "alias": "users_vw", "checksum": {"name": "sha256", "checksum": "9ee888b59655f06e5ab5f882e715c7507db55f57f42eda67a346064505b3b755"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/views/users_vw.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1634840480, "compiled_sql": "\n\nselect * from wearables.users", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"advana\".\"wearables\".\"users_vw\""}, "test.wearables_dm.not_null_active_duration_user_id_external.24870f1d83": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id_external", "model": "{% if config.get('where') %}(select * from {{ ref('active_duration') }} where {{config.get('where')}}) active_duration{% else %}{{ ref('active_duration') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.wearables_dm.active_duration"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables_dbt_test__audit", "fqn": ["wearables_dm", "schema_test", "not_null_active_duration_user_id_external"], "unique_id": "test.wearables_dm.not_null_active_duration_user_id_external.24870f1d83", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "schema_test/not_null_active_duration_user_id_external.sql", "original_file_path": "models/schema.yml", "name": "not_null_active_duration_user_id_external", "alias": "not_null_active_duration_user_id_external", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["active_duration"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/schema.yml/schema_test/not_null_active_duration_user_id_external.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1634840480, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"advana\".\"wearables\".\"active_duration\"\nwhere user_id_external is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id_external"}, "test.wearables_dm.not_null_steps_user_id_external.00fb84a4a6": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id_external", "model": "{% if config.get('where') %}(select * from {{ ref('steps') }} where {{config.get('where')}}) steps{% else %}{{ ref('steps') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.wearables_dm.steps"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "advana", "schema": "wearables_dbt_test__audit", "fqn": ["wearables_dm", "schema_test", "not_null_steps_user_id_external"], "unique_id": "test.wearables_dm.not_null_steps_user_id_external.00fb84a4a6", "package_name": "wearables_dm", "root_path": "/Users/mm51929/projects/2020/10-ds-wearables-pilot-analytics/src/analytics_pipeline/wearables_dm", "path": "schema_test/not_null_steps_user_id_external.sql", "original_file_path": "models/schema.yml", "name": "not_null_steps_user_id_external", "alias": "not_null_steps_user_id_external", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["steps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/wearables_dm/models/schema.yml/schema_test/not_null_steps_user_id_external.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1634840480, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"advana\".\"wearables\".\"steps\"\nwhere user_id_external is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id_external"}}, "sources": {}, "macros": {"macro.dbt_vertica.vertica__information_schema_name": {"unique_id": "macro.dbt_vertica.vertica__information_schema_name", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__information_schema_name", "macro_sql": "{% macro vertica__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.v_catalog\n  {%- else -%}\n    v_catalog\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__list_schemas": {"unique_id": "macro.dbt_vertica.vertica__list_schemas", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__list_schemas", "macro_sql": "{% macro vertica__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select schema_name\n    from v_catalog.schemata\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__check_schema_exists": {"unique_id": "macro.dbt_vertica.vertica__check_schema_exists", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__check_schema_exists", "macro_sql": "{% macro vertica__check_schema_exists(database, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from v_catalog.schemata\n        where schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__drop_schema": {"unique_id": "macro.dbt_vertica.vertica__drop_schema", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__drop_schema", "macro_sql": "{% macro vertica__drop_schema(relation) -%}\n  {% call statement('drop_schema') -%}\n    drop schema {{ relation.without_identifier().include(database=False) }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__create_schema": {"unique_id": "macro.dbt_vertica.vertica__create_schema", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__create_schema", "macro_sql": "{% macro vertica__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__list_relations_without_caching": {"unique_id": "macro.dbt_vertica.vertica__list_relations_without_caching", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__list_relations_without_caching", "macro_sql": "{% macro vertica__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      'table' as type\n    from v_catalog.tables\n    where table_schema ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      'view' as type\n    from v_catalog.views\n    where table_schema ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__rename_relation": {"unique_id": "macro.dbt_vertica.vertica__rename_relation", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__rename_relation", "macro_sql": "{% macro vertica__rename_relation(from_relation, to_relation) %}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ from_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__get_columns_in_relation": {"unique_id": "macro.dbt_vertica.vertica__get_columns_in_relation", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__get_columns_in_relation", "macro_sql": "{% macro vertica__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n    select \n    column_name\n    , data_type\n    , character_maximum_length \n    , numeric_precision \n    , numeric_scale\n    from (\n        select \n        column_name\n        , data_type\n        , character_maximum_length \n        , numeric_precision \n        , numeric_scale \n        , ordinal_position \n        from v_catalog.columns\n        where table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n        union all\n        select \n        column_name\n        , data_type\n        , character_maximum_length \n        , numeric_precision \n        , numeric_scale \n        , ordinal_position \n        from v_catalog.view_columns\n        where table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n    ) t\n    order by ordinal_position \n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__create_view_as": {"unique_id": "macro.dbt_vertica.vertica__create_view_as", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__create_view_as", "macro_sql": "{% macro vertica__create_view_as(relation, sql) %}\n  {% set sql_header = config.get('sql_header', none) %}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace view {{ relation }} as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__create_table_as": {"unique_id": "macro.dbt_vertica.vertica__create_table_as", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__create_table_as", "macro_sql": "{% macro vertica__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}local temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if temporary: -%}on commit preserve rows{%- endif %}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__make_temp_relation": {"unique_id": "macro.dbt_vertica.vertica__make_temp_relation", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__make_temp_relation", "macro_sql": "{% macro vertica__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__get_catalog": {"unique_id": "macro.dbt_vertica.vertica__get_catalog", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__get_catalog", "macro_sql": "{% macro vertica__get_catalog(information_schema, schemas) -%}\n  {% call statement('get_catalog', fetch_result=True) %}\n    \n    select \n    '{{ information_schema.database }}' table_database\n    , tab.table_schema\n    , tab.table_name\n    , 'TABLE' table_type\n    , comment table_comment\n    , tab.owner_name table_owner\n    , col.column_name \n    , col.ordinal_position column_index\n    , col.data_type column_type\n    , nullif('','') column_comment\n    from v_catalog.tables tab\n    join v_catalog.columns col on tab.table_id = col.table_id \n    left join v_catalog.comments on tab.table_id = object_id\n    where not(tab.is_system_table) and\n        (\n          {%- for schema in schemas -%}\n            lower(tab.table_schema) = lower('{{ schema }}') {%- if not loop.last %} or {% endif %}\n          {%- endfor -%}\n        )\n    union all\n    select \n    '{{ information_schema.database }}' table_database\n    , vw.table_schema\n    , vw.table_name\n    , 'VIEW' table_type\n    , comment table_comment\n    , vw.owner_name table_owner\n    , col.column_name \n    , col.ordinal_position column_index\n    , col.data_type column_type\n    , nullif('','') column_comment\n    from v_catalog.views vw\n    join v_catalog.view_columns col on vw.table_id = col.table_id \n    left join v_catalog.comments on vw.table_id = object_id\n    where not(vw.is_system_view) and\n        (\n          {%- for schema in schemas -%}\n            lower(vw.table_schema) = lower('{{ schema }}') {%- if not loop.last %} or {% endif %}\n          {%- endfor -%}\n        )\n    order by table_schema, table_name, column_index \n    \n  {% endcall %}\n  {{ return(load_result('get_catalog').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__current_timestamp": {"unique_id": "macro.dbt_vertica.vertica__current_timestamp", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "vertica__current_timestamp", "macro_sql": "{% macro vertica__current_timestamp() -%}\n  current_timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__create_csv_table": {"unique_id": "macro.dbt_vertica.vertica__create_csv_table", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "vertica__create_csv_table", "macro_sql": "{% macro vertica__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__load_csv_rows": {"unique_id": "macro.dbt_vertica.vertica__load_csv_rows", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "vertica__load_csv_rows", "macro_sql": "{% macro vertica__load_csv_rows(model, agate_table) %}\n  {{ return(copy_local_load_csv_rows(model, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.copy_local_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.basic_load_csv_rows": {"unique_id": "macro.dbt_vertica.basic_load_csv_rows", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            {% for row in chunk -%}\n\n                insert into {{ this.render() }} ({{ cols_sql }}) values\n                ({%- for column in agate_table.column_names -%} \n                  %s \n                  {%- if not loop.last %},{% endif %} \n                {%- endfor %});\n                \n            {% endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.copy_local_load_csv_rows": {"unique_id": "macro.dbt_vertica.copy_local_load_csv_rows", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "copy_local_load_csv_rows", "macro_sql": "{% macro copy_local_load_csv_rows(model, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n\n    {% set sql %}\n        copy {{ this.render() }}\n        ({{ cols_sql }})\n        from local '{{ agate_table.original_abspath }}'\n        delimiter ','\n        enclosed by '\"'\n        skip 1\n        abort on error\n        rejected data as table {{ this.without_identifier() }}.seed_rejects;\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.materialization_seed_vertica": {"unique_id": "macro.dbt_vertica.materialization_seed_vertica", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_vertica", "macro_sql": "{% materialization seed, adapter='vertica' %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call statement('main') %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.materialization_view_vertica": {"unique_id": "macro.dbt_vertica.materialization_view_vertica", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_vertica", "macro_sql": "{% materialization view, adapter='vertica' %}\n  {{ return(create_or_replace_view()) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.materialization_table_vertica": {"unique_id": "macro.dbt_vertica.materialization_table_vertica", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_vertica", "macro_sql": "{% materialization table, adapter='vertica' %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica___validate_get_incremental_strategy": {"unique_id": "macro.dbt_vertica.vertica___validate_get_incremental_strategy", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "vertica___validate_get_incremental_strategy", "macro_sql": "{% macro vertica___validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__get_incremental_sql": {"unique_id": "macro.dbt_vertica.vertica__get_incremental_sql", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "vertica__get_incremental_sql", "macro_sql": "{% macro vertica__get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(vertica__get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.vertica__get_merge_sql": {"unique_id": "macro.dbt_vertica.vertica__get_merge_sql", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "vertica__get_merge_sql", "macro_sql": "{% macro vertica__get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {%- set dest_columns_csv =  get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_columns = config.get(\"merge_columns\", default=None)%}\n\n    merge into {{ target_relation }} as DBT_INTERNAL_DEST\n    using {{ tmp_relation }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n      on DBT_INTERNAL_DEST.{{ unique_key }} = DBT_INTERNAL_SOURCE.{{ unique_key }}\n    {% elif merge_columns %}\n      on \n      {% for column in merge_columns %}\n          DBT_INTERNAL_DEST.{{ adapter.quote(column) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column) }}\n          {%- if not loop.last %} AND {%- endif %}\n      {%- endfor %}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_columns_csv }})\n    values\n        (\n          {% for column in dest_columns -%}\n            DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt_vertica.materialization_incremental_vertica": {"unique_id": "macro.dbt_vertica.materialization_incremental_vertica", "package_name": "dbt_vertica", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt_vertica-0.20.2-py3.9.egg/dbt/include/vertica", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_vertica", "macro_sql": "{% materialization incremental, adapter='vertica' %}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = vertica___validate_get_incremental_strategy(config) %}\n\n  -- setup\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = vertica__create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(existing_relation, backup_relation) %}\n      {% set build_sql = vertica__create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(vertica__create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n      {% set build_sql = vertica__get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_vertica.vertica___validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt_vertica.vertica__create_table_as", "macro.dbt.run_query", "macro.dbt_vertica.vertica__get_incremental_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_vertica.vertica__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select * from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select * from {{ to }}\n)\n\nselect\n    child.{{ column_name }}\n\nfrom child\nleft join parent\n    on child.{{ column_name }} = parent.{{ field }}\n\nwhere parent.{{ field }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }},\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1634840479}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/mm51929/.pyenv/versions/3.9.5/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.wearables_dm.primary_device": ["model.wearables_dm.metric_data_vw"], "model.wearables_dm.wearables_dm": ["model.wearables_dm.mortality_uwdm_height_weight_vw", "model.wearables_dm.user_data_flat", "model.wearables_dm.users_edw_wide", "model.wearables_dm.users_enrolled_vw", "model.wearables_dm.users_m3s_hits", "model.wearables_dm.users_m3s_hits", "model.wearables_dm.users_major_product_type_desc_pivot", "model.wearables_dm.users_risk_class_type_cde"], "model.wearables_dm.users_m3s_hits": ["model.wearables_dm.blender_analytics_fm3s_io_vw", "model.wearables_dm.blender_analytics_m3s_io_vw", "model.wearables_dm.user_data_flat", "model.wearables_dm.users_edw_wide", "model.wearables_dm.users_enrolled_vw"], "model.wearables_dm.users_risk_class_type_cde": ["model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw", "model.wearables_dm.users_edw_wide"], "model.wearables_dm.user_data_flat": ["model.wearables_dm.active_duration", "model.wearables_dm.floors_climbed", "model.wearables_dm.primary_device", "model.wearables_dm.sleep_duration", "model.wearables_dm.steps"], "model.wearables_dm.users_edw_wide": ["model.wearables_dm.edw_vw_dim_agreement_vw_vw", "model.wearables_dm.edw_vw_dim_electronic_address_vw_vw", "model.wearables_dm.edw_vw_dim_party_vw_vw", "model.wearables_dm.edw_vw_party_master_of_masters_xref_vw_vw", "model.wearables_dm.edw_vw_rel_party_agreement_vw_vw", "model.wearables_dm.edw_vw_rel_party_electronic_address_vw_vw", "model.wearables_dm.users_enrolled_vw"], "model.wearables_dm.users_major_product_type_desc_pivot": ["model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw", "model.wearables_dm.users_edw_wide"], "model.wearables_dm.edw_vw_dim_party_vw_vw": [], "model.wearables_dm.mortality_uwdm_height_weight_vw": [], "model.wearables_dm.blender_analytics_m3s_io_vw": [], "model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw": [], "model.wearables_dm.edw_vw_rel_party_electronic_address_vw_vw": [], "model.wearables_dm.blender_analytics_fm3s_io_vw": [], "model.wearables_dm.edw_vw_rel_party_agreement_vw_vw": [], "model.wearables_dm.edw_vw_party_master_of_masters_xref_vw_vw": [], "model.wearables_dm.edw_vw_dim_electronic_address_vw_vw": [], "model.wearables_dm.edw_vw_dim_agreement_vw_vw": [], "model.wearables_dm.active_duration": ["model.wearables_dm.metric_data_vw"], "model.wearables_dm.steps": ["model.wearables_dm.metric_data_vw"], "model.wearables_dm.floors_climbed": ["model.wearables_dm.metric_data_vw"], "model.wearables_dm.sleep_duration": ["model.wearables_dm.metric_data_vw"], "model.wearables_dm.metric_data_vw": [], "model.wearables_dm.users_enrolled_vw": [], "model.wearables_dm.users_vw": [], "test.wearables_dm.not_null_active_duration_user_id_external.24870f1d83": ["model.wearables_dm.active_duration"], "test.wearables_dm.not_null_steps_user_id_external.00fb84a4a6": ["model.wearables_dm.steps"]}, "child_map": {"model.wearables_dm.primary_device": ["model.wearables_dm.user_data_flat"], "model.wearables_dm.wearables_dm": [], "model.wearables_dm.users_m3s_hits": ["model.wearables_dm.wearables_dm", "model.wearables_dm.wearables_dm"], "model.wearables_dm.users_risk_class_type_cde": ["model.wearables_dm.wearables_dm"], "model.wearables_dm.user_data_flat": ["model.wearables_dm.users_m3s_hits", "model.wearables_dm.wearables_dm"], "model.wearables_dm.users_edw_wide": ["model.wearables_dm.users_m3s_hits", "model.wearables_dm.users_major_product_type_desc_pivot", "model.wearables_dm.users_risk_class_type_cde", "model.wearables_dm.wearables_dm"], "model.wearables_dm.users_major_product_type_desc_pivot": ["model.wearables_dm.wearables_dm"], "model.wearables_dm.edw_vw_dim_party_vw_vw": ["model.wearables_dm.users_edw_wide"], "model.wearables_dm.mortality_uwdm_height_weight_vw": ["model.wearables_dm.wearables_dm"], "model.wearables_dm.blender_analytics_m3s_io_vw": ["model.wearables_dm.users_m3s_hits"], "model.wearables_dm.edw_uw_vw_uw_life_apps_vw_vw": ["model.wearables_dm.users_major_product_type_desc_pivot", "model.wearables_dm.users_risk_class_type_cde"], "model.wearables_dm.edw_vw_rel_party_electronic_address_vw_vw": ["model.wearables_dm.users_edw_wide"], "model.wearables_dm.blender_analytics_fm3s_io_vw": ["model.wearables_dm.users_m3s_hits"], "model.wearables_dm.edw_vw_rel_party_agreement_vw_vw": ["model.wearables_dm.users_edw_wide"], "model.wearables_dm.edw_vw_party_master_of_masters_xref_vw_vw": ["model.wearables_dm.users_edw_wide"], "model.wearables_dm.edw_vw_dim_electronic_address_vw_vw": ["model.wearables_dm.users_edw_wide"], "model.wearables_dm.edw_vw_dim_agreement_vw_vw": ["model.wearables_dm.users_edw_wide"], "model.wearables_dm.active_duration": ["model.wearables_dm.user_data_flat", "test.wearables_dm.not_null_active_duration_user_id_external.24870f1d83"], "model.wearables_dm.steps": ["model.wearables_dm.user_data_flat", "test.wearables_dm.not_null_steps_user_id_external.00fb84a4a6"], "model.wearables_dm.floors_climbed": ["model.wearables_dm.user_data_flat"], "model.wearables_dm.sleep_duration": ["model.wearables_dm.user_data_flat"], "model.wearables_dm.metric_data_vw": ["model.wearables_dm.active_duration", "model.wearables_dm.floors_climbed", "model.wearables_dm.primary_device", "model.wearables_dm.sleep_duration", "model.wearables_dm.steps"], "model.wearables_dm.users_enrolled_vw": ["model.wearables_dm.users_edw_wide", "model.wearables_dm.users_m3s_hits", "model.wearables_dm.wearables_dm"], "model.wearables_dm.users_vw": [], "test.wearables_dm.not_null_active_duration_user_id_external.24870f1d83": [], "test.wearables_dm.not_null_steps_user_id_external.00fb84a4a6": []}}